{"version":3,"sources":["ng://mat-select-autocomplete/lib/select-autocomplete.service.ts","ng://mat-select-autocomplete/lib/select-autocomplete.component.ts","ng://mat-select-autocomplete/lib/select-autocomplete.module.ts"],"names":["SelectAutocompleteService","factory","ɵfac","providedIn","i0.ɵɵelementStart","i0.ɵɵlistener","$event","core","_r16","toggleSelectAll","i0.ɵɵelementEnd","i0.ɵɵproperty","i0.ɵɵtext","i0.ɵɵstyleProp","option_r18","ctx_r13","value","i0.ɵɵadvance","i0.ɵɵtextInterpolate1","i0.ɵɵtextInterpolate","SelectAutocompleteComponent","this","selectPlaceholder","disabled","display","formControl","FormControl","errorMsg","showErrorMsg","multiple","labelCount","appearance","disableOptionCentering","selectionChange","EventEmitter","filteredOptions","selectedValue","selectAllChecked","displayString","prototype","ngOnChanges","disable","enable","options","selectedOptions","ngDoCheck","length","emit","toggleDropdown","selectElem","toggle","val","_this","checked","forEach","option","includes","concat","filteredValues_1","getFilteredOptionsValues","filter","item","filterItem","toLowerCase","localeCompare","hideOption","indexOf","filteredValues","push","onDisplayString","displayOption","i","this_1","slice","substr","onSelectionChange","count","trackByFn","index","selectors","viewQuery","rf","ctx","i0.ɵɵtemplate","_r12","i0.ɵɵpropertyInterpolate","SelectAutocompleteModule","imports","FormsModule","CommonModule","MatIconModule","MatButtonModule","MatSelectModule","MatCheckboxModule","MatFormFieldModule","ReactiveFormsModule","declarations","exports"],"mappings":"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","sourcesContent":["import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class SelectAutocompleteService {\n\n  constructor() { }\n}\n","import {\n  Component,\n  EventEmitter,\n  Input,\n  OnChanges,\n  Output,\n  ViewChild,\n  DoCheck\n} from '@angular/core';\nimport { FormControl } from '@angular/forms';\n\n@Component({\n  selector: 'mat-select-autocomplete',\n  template: `\n    <mat-form-field appearance=\"{{ appearance }}\">\n      <mat-select\n        #selectElem\n        [placeholder]=\"placeholder\"\n        [formControl]=\"formControl\"\n        [multiple]=\"multiple\"\n        [(ngModel)]=\"selectedValue\"\n        (selectionChange)=\"onSelectionChange($event)\"\n        disableOptionCentering=\"disableOptionCentering\"\n      >\n        <div class=\"box-search\">\n          <mat-checkbox\n            *ngIf=\"multiple\"\n            color=\"primary\"\n            class=\"box-select-all\"\n            [(ngModel)]=\"selectAllChecked\"\n            (change)=\"toggleSelectAll($event)\"\n          ></mat-checkbox>\n          <input\n            #searchInput\n            type=\"text\"\n            [ngClass]=\"{ 'pl-1': !multiple }\"\n            (input)=\"filterItem(searchInput.value)\"\n            [placeholder]=\"selectPlaceholder\"\n          />\n          <div\n            class=\"box-search-icon\"\n            (click)=\"filterItem(''); searchInput.value = ''\"\n          >\n            <button mat-icon-button class=\"search-button\">\n              <mat-icon class=\"mat-24\" aria-label=\"Search icon\">clear</mat-icon>\n            </button>\n          </div>\n        </div>\n        <mat-select-trigger>\n          {{ onDisplayString() }}\n        </mat-select-trigger>\n        <mat-option\n          *ngFor=\"let option of options; trackBy: trackByFn\"\n          [disabled]=\"option.disabled\"\n          [value]=\"option[value]\"\n          [style.display]=\"hideOption(option) ? 'none' : 'flex'\"\n          >{{ option[display] }}\n        </mat-option>\n      </mat-select>\n      <mat-hint style=\"color:red\" *ngIf=\"showErrorMsg\">{{ errorMsg }}</mat-hint>\n    </mat-form-field>\n  `,\n  styles: [\n    `\n      .box-search {\n        margin: 8px;\n        border-radius: 2px;\n        box-shadow: 0 2px 2px 0 rgba(0, 0, 0, 0.16),\n          0 0 0 1px rgba(0, 0, 0, 0.08);\n        transition: box-shadow 200ms cubic-bezier(0.4, 0, 0.2, 1);\n        display: flex;\n      }\n      .box-search input {\n        flex: 1;\n        border: none;\n        outline: none;\n      }\n      .box-select-all {\n        width: 36px;\n        line-height: 33px;\n        color: #808080;\n        text-align: center;\n      }\n      .search-button {\n        width: 36px;\n        height: 36px;\n        line-height: 33px;\n        color: #808080;\n      }\n      .pl-1 {\n        padding-left: 1rem;\n      }\n    `\n  ]\n})\nexport class SelectAutocompleteComponent implements OnChanges, DoCheck {\n  @Input() selectPlaceholder = 'search...';\n  @Input() placeholder: string;\n  @Input() options;\n  @Input() disabled = false;\n  @Input() display = 'display';\n  @Input() value = 'value';\n  @Input() formControl: FormControl = new FormControl();\n  @Input() errorMsg = 'Field is required';\n  @Input() showErrorMsg = false;\n  @Input() selectedOptions;\n  @Input() multiple = true;\n\n  // New Options\n  @Input() labelCount = 1;\n  @Input() appearance: 'standard' | 'fill' | 'outline' = 'standard';\n  @Input() disableOptionCentering = false;\n\n  @Output()\n  selectionChange: EventEmitter<any> = new EventEmitter();\n\n  @ViewChild('selectElem', { static: true }) selectElem;\n\n  filteredOptions: Array<any> = [];\n  selectedValue: Array<any> = [];\n  selectAllChecked = false;\n  displayString = '';\n  constructor() {}\n\n  ngOnChanges() {\n    if (this.disabled) {\n      this.formControl.disable();\n    } else {\n      this.formControl.enable();\n    }\n    this.filteredOptions = this.options;\n    if (this.selectedOptions) {\n      this.selectedValue = this.selectedOptions;\n    } else if (this.formControl.value) {\n      this.selectedValue = this.formControl.value;\n    }\n  }\n\n  ngDoCheck() {\n    if (!this.selectedValue.length) {\n      this.selectionChange.emit(this.selectedValue);\n    }\n  }\n\n  toggleDropdown() {\n    this.selectElem.toggle();\n  }\n\n  toggleSelectAll(val) {\n    if (val.checked) {\n      this.filteredOptions.forEach(option => {\n        if (!this.selectedValue.includes(option[this.value])) {\n          this.selectedValue = this.selectedValue.concat([option[this.value]]);\n        }\n      });\n    } else {\n      const filteredValues = this.getFilteredOptionsValues();\n      this.selectedValue = this.selectedValue.filter(\n        item => !filteredValues.includes(item)\n      );\n    }\n    this.selectionChange.emit(this.selectedValue);\n  }\n\n  filterItem(value) {\n    this.filteredOptions = this.options.filter(\n      item => item[this.display].toLowerCase().localeCompare(value.toLowerCase()) > -1\n    );\n    this.selectAllChecked = true;\n    this.filteredOptions.forEach(item => {\n      if (this.multiple && !this.selectedValue.includes(item[this.value])) {\n        this.selectAllChecked = false;\n      }\n    });\n    if (!this.filteredOptions.length) {\n      this.selectAllChecked = false;\n    }\n  }\n\n  hideOption(option) {\n    return !(this.filteredOptions.indexOf(option) > -1);\n  }\n\n  // Returns plain strings array of filtered values\n  getFilteredOptionsValues() {\n    const filteredValues = [];\n    this.filteredOptions.forEach(option => {\n      filteredValues.push(option.value);\n    });\n    return filteredValues;\n  }\n\n  onDisplayString() {\n    this.displayString = '';\n    // console.log('Valor seleccionado: ' + this.selectedValue);\n    if (this.selectedValue) {\n      // console.log('Entra aquí.');\n      let displayOption = [];\n      if (this.multiple) {\n        // console.log('Multiple');\n        // Multi select display\n        for (let i = 0; i < this.labelCount; i++) {\n          displayOption[i] = this.options.filter(\n            option => option[this.value] === this.selectedValue[i]\n          )[0];\n        }\n        if (displayOption.length) {\n          for (let i = 0; i < displayOption.length; i++) {\n            if (displayOption[i] && displayOption[i][this.display]) {\n              this.displayString += displayOption[i][this.display] + ',';\n            }\n          }\n          this.displayString = this.displayString.slice(0, -1);\n          if (\n            this.selectedValue.length > 1 &&\n            this.selectedValue.length > this.labelCount\n          ) {\n            // Se muestran unos pocos elementos de los seleccionados y se mencionan\n            // que existen n más.\n            this.displayString =\n              (\n                (this.displayString.length > 45) ?\n                  this.displayString.substr(0, 45 - 1) + '...' :\n                  this.displayString\n              ) + ` (y ${this.selectedValue.length - this.labelCount} más)`;\n          }\n        }\n      } else {\n        // console.log('Single');\n        // Single select display\n        displayOption = this.options.filter(\n          option => option[this.value] === this.selectedValue\n        );\n        if (displayOption.length) {\n          this.displayString = displayOption[0][this.display];\n        }\n      }\n    }\n    return this.displayString;\n  }\n\n  onSelectionChange(val) {\n    const filteredValues = this.getFilteredOptionsValues();\n    let count = 0;\n    if (this.multiple) {\n      this.selectedValue.filter(item => {\n        if (filteredValues.includes(item)) {\n          count++;\n        }\n      });\n      this.selectAllChecked = count === this.filteredOptions.length;\n    }\n    this.selectedValue = val.value;\n    this.selectionChange.emit(this.selectedValue);\n  }\n\n  public trackByFn(index, item) {\n    return item.value;\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { SelectAutocompleteComponent } from './select-autocomplete.component';\n\n@NgModule({\n  imports: [\n    FormsModule,\n    CommonModule,\n    MatIconModule,\n    MatButtonModule,\n    MatSelectModule,\n    MatCheckboxModule,\n    MatFormFieldModule,\n    ReactiveFormsModule,\n  ],\n  declarations: [SelectAutocompleteComponent],\n  exports: [SelectAutocompleteComponent]\n})\nexport class SelectAutocompleteModule { }\n"]}
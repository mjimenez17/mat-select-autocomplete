{"version":3,"sources":["ng://mat-select-autocomplete/lib/select-autocomplete.service.ts","ng://mat-select-autocomplete/lib/select-autocomplete.component.ts","ng://mat-select-autocomplete/lib/select-autocomplete.module.ts"],"names":["SelectAutocompleteService","factory","ɵfac","providedIn","i0.ɵɵelementStart","i0.ɵɵlistener","$event","core","_r16","toggleSelectAll","i0.ɵɵelementEnd","i0.ɵɵproperty","i0.ɵɵtext","i0.ɵɵstyleProp","option_r18","ctx_r13","value","i0.ɵɵadvance","i0.ɵɵtextInterpolate1","i0.ɵɵtextInterpolate","SelectAutocompleteComponent","this","selectPlaceholder","disabled","display","formControl","FormControl","errorMsg","showErrorMsg","multiple","labelCount","appearance","selectionChange","EventEmitter","filteredOptions","selectedValue","selectAllChecked","displayString","prototype","ngOnChanges","disable","enable","options","selectedOptions","ngDoCheck","length","emit","toggleDropdown","selectElem","toggle","val","_this","checked","forEach","option","includes","concat","filteredValues_1","getFilteredOptionsValues","filter","item","filterItem","toLowerCase","indexOf","hideOption","filteredValues","push","onDisplayString","displayOption","i","this_1","slice","substr","onSelectionChange","count","trackByFn","index","selectors","viewQuery","rf","ctx","i0.ɵɵtemplate","_r12","i0.ɵɵpropertyInterpolate","SelectAutocompleteModule","imports","FormsModule","CommonModule","MatIconModule","MatButtonModule","MatSelectModule","MatCheckboxModule","MatFormFieldModule","ReactiveFormsModule","declarations","exports"],"mappings":"o7BAOE,SAAAA,6CAFWA,2CAAAA,EAAyBC,QAAzBD,EAAyBE,KAAAC,WAFxB,qFCqBJC,EAAAA,kBAAAA,EAAAA,eAAAA,IAIEC,EAAAA,cAAAA,iBAAAA,SAAAA,GAAAA,OAAAA,EAAAA,iBAAAA,GAAAA,EAAAA,mBAAAA,iBAAAA,IAAAA,CAA8B,UAAA,SAAAC,GAAA,OAAAC,EAAA,iBAAAC,GAAAD,EAAA,mBAAAE,gBAAAH,MAE/BI,EAAAA,qDAFCC,EAAAA,cAAAA,UAAAA,EAAAA,4CAsBJP,EAAAA,kBAAAA,EAAAA,aAAAA,IAKGQ,EAAAA,UAAAA,GACHF,EAAAA,iEAFEG,EAAAA,eAAAA,UAAAA,EAAAA,WAAAA,GAAAA,OAAAA,QAFAF,EAAAA,cAAAA,WAAAA,EAAAA,SAAAA,CAA4B,QAAAG,EAAAC,EAAAC,QAG3BC,EAAAA,aAAAA,GAAAC,EAAAA,sBAAAA,GAAAA,EAAAA,EAAAA,SAAAA,+BAGLd,EAAAA,kBAAAA,EAAAA,WAAAA,IAAiDQ,EAAAA,UAAAA,GAAcF,EAAAA,mDAAdO,EAAAA,aAAAA,GAAAE,EAAAA,qBAAAA,EAAAA,4DA8DrD,SAAAC,IAzBSC,KAAAC,kBAAoB,YAGpBD,KAAAE,UAAW,EACXF,KAAAG,QAAU,UACVH,KAAAL,MAAQ,QACRK,KAAAI,YAA2B,IAAIC,EAAAA,YAC/BL,KAAAM,SAAW,oBACXN,KAAAO,cAAe,EAEfP,KAAAQ,UAAW,EAGXR,KAAAS,WAAa,EACbT,KAAAU,WAA8C,WAGvDV,KAAAW,gBAAqC,IAAIC,EAAAA,aAIzCZ,KAAAa,gBAA8B,GAC9Bb,KAAAc,cAA4B,GAC5Bd,KAAAe,kBAAmB,EACnBf,KAAAgB,cAAgB,UAGhBjB,EAAAkB,UAAAC,YAAA,WACMlB,KAAKE,SACPF,KAAKI,YAAYe,UAEjBnB,KAAKI,YAAYgB,SAEnBpB,KAAKa,gBAAkBb,KAAKqB,QACxBrB,KAAKsB,gBACPtB,KAAKc,cAAgBd,KAAKsB,gBACjBtB,KAAKI,YAAYT,QAC1BK,KAAKc,cAAgBd,KAAKI,YAAYT,QAI1CI,EAAAkB,UAAAM,UAAA,WACOvB,KAAKc,cAAcU,QACtBxB,KAAKW,gBAAgBc,KAAKzB,KAAKc,gBAInCf,EAAAkB,UAAAS,eAAA,WACE1B,KAAK2B,WAAWC,UAGlB7B,EAAAkB,UAAA7B,gBAAA,SAAgByC,GAAhB,IAAAC,EAAA9B,KACE,GAAI6B,EAAIE,QACN/B,KAAKa,gBAAgBmB,SAAQ,SAAAC,GACtBH,EAAKhB,cAAcoB,SAASD,EAAOH,EAAKnC,UAC3CmC,EAAKhB,cAAgBgB,EAAKhB,cAAcqB,OAAO,CAACF,EAAOH,EAAKnC,iBAG3D,CACL,IAAMyC,EAAiBpC,KAAKqC,2BAC5BrC,KAAKc,cAAgBd,KAAKc,cAAcwB,QACtC,SAAAC,GAAQ,OAACH,EAAeF,SAASK,MAGrCvC,KAAKW,gBAAgBc,KAAKzB,KAAKc,gBAGjCf,EAAAkB,UAAAuB,WAAA,SAAW7C,GAAX,IAAAmC,EAAA9B,KACEA,KAAKa,gBAAkBb,KAAKqB,QAAQiB,QAClC,SAAAC,GAAQ,OAAAA,EAAKT,EAAK3B,SAASsC,cAAcC,QAAQ/C,EAAM8C,gBAAkB,KAE3EzC,KAAKe,kBAAmB,EACxBf,KAAKa,gBAAgBmB,SAAQ,SAAAO,GACtBT,EAAKhB,cAAcoB,SAASK,EAAKT,EAAKnC,UACzCmC,EAAKf,kBAAmB,MAGvBf,KAAKa,gBAAgBW,SACxBxB,KAAKe,kBAAmB,IAI5BhB,EAAAkB,UAAA0B,WAAA,SAAWV,GACT,QAASjC,KAAKa,gBAAgB6B,QAAQT,IAAW,IAInDlC,EAAAkB,UAAAoB,yBAAA,WACE,IAAMO,EAAiB,GAIvB,OAHA5C,KAAKa,gBAAgBmB,SAAQ,SAAAC,GAC3BW,EAAeC,KAAKZ,EAAOtC,UAEtBiD,GAGT7C,EAAAkB,UAAA6B,gBAAA,WAAA,IAAAhB,EAAA9B,KAGE,GAFAA,KAAKgB,cAAgB,GAEjBhB,KAAKc,cAAe,CAEtB,IAAIiC,EAAgB,GACpB,GAAI/C,KAAKQ,SAAU,CAGjB,mBAASwC,GACPD,EAAcC,GAAKC,EAAK5B,QAAQiB,QAC9B,SAAAL,GAAU,OAAAA,EAAOH,EAAKnC,SAAWmC,EAAKhB,cAAckC,MACpD,WAHKA,EAAI,EAAGA,EAAIhD,KAAKS,WAAYuC,MAA5BA,GAKT,GAAID,EAAcvB,OAAQ,CACxB,IAASwB,EAAI,EAAGA,EAAID,EAAcvB,OAAQwB,IACpCD,EAAcC,IAAMD,EAAcC,GAAGhD,KAAKG,WAC5CH,KAAKgB,eAAiB+B,EAAcC,GAAGhD,KAAKG,SAAW,KAG3DH,KAAKgB,cAAgBhB,KAAKgB,cAAckC,MAAM,GAAI,GAEhDlD,KAAKc,cAAcU,OAAS,GAC5BxB,KAAKc,cAAcU,OAASxB,KAAKS,aAIjCT,KAAKgB,eAEAhB,KAAKgB,cAAcQ,OAAS,GAC3BxB,KAAKgB,cAAcmC,OAAO,EAAG,IAAU,MACvCnD,KAAKgB,eACL,QAAOhB,KAAKc,cAAcU,OAASxB,KAAKS,YAAU,eAM5DsC,EAAgB/C,KAAKqB,QAAQiB,QAC3B,SAAAL,GAAU,OAAAA,EAAOH,EAAKnC,SAAWmC,EAAKhB,kBAEtBU,SAChBxB,KAAKgB,cAAgB+B,EAAc,GAAG/C,KAAKG,UAKjD,OAAOH,KAAKgB,eAGdjB,EAAAkB,UAAAmC,kBAAA,SAAkBvB,GAChB,IAAMe,EAAiB5C,KAAKqC,2BACxBgB,EAAQ,EACRrD,KAAKQ,WACPR,KAAKc,cAAcwB,QAAO,SAAAC,GACpBK,EAAeV,SAASK,IAC1Bc,OAGJrD,KAAKe,iBAAmBsC,IAAUrD,KAAKa,gBAAgBW,QAEzDxB,KAAKc,cAAgBe,EAAIlC,MACzBK,KAAKW,gBAAgBc,KAAKzB,KAAKc,gBAG1Bf,EAAAkB,UAAAqC,UAAP,SAAiBC,EAAOhB,GACtB,OAAOA,EAAK5C,wCAlKHI,wCAAAA,EAA2ByD,UAAA,CAAA,CAAA,4BAAAC,UAAA,SAAAC,EAAAC,UAAA,EAAAD,ssCAhFpC3E,EAAAA,kBAAAA,EAAAA,iBAAAA,GACEA,EAAAA,kBAAAA,EAAAA,aAAAA,EAAAA,GAKEC,EAAAA,cAAAA,iBAAAA,SAAAA,GAAAA,OAAAA,EAAAA,cAAAA,IAAAA,CAA2B,mBAAA,SAAAC,GAAA,OACR0E,EAAAP,kBAAAnE,MAEnBF,EAAAA,kBAAAA,EAAAA,MAAAA,GACE6E,EAAAA,cAAAA,EAAAA,EAAAA,EAAAA,EAAAA,eAAAA,GAOA7E,EAAAA,kBAAAA,EAAAA,QAAAA,EAAAA,GAIEC,EAAAA,cAAAA,SAAAA,WAAAA,EAAAA,iBAAAA,GAAAA,IAAAA,EAAAA,EAAAA,eAAAA,GAAAA,OAAS2E,EAAAnB,WAAAqB,EAAAlE,UAJXN,EAAAA,kBAOAN,EAAAA,kBAAAA,EAAAA,MAAAA,GAEEC,EAAAA,cAAAA,SAAAA,WAAAA,EAAAA,iBAAAA,GAAAA,IAAAA,EAAAA,EAAAA,eAAAA,GAAuB,OAAd2E,EAAAnB,WAAW,IAAGqB,EAAAlE,MAAsB,MAE7CZ,EAAAA,kBAAAA,EAAAA,SAAAA,GACEA,EAAAA,kBAAAA,EAAAA,WAAAA,GAAkDQ,EAAAA,UAAAA,GAAAA,SAAKF,EAAAA,kBACzDA,EAAAA,kBACFA,EAAAA,kBACFA,EAAAA,kBACAN,EAAAA,kBAAAA,GAAAA,sBACEQ,EAAAA,UAAAA,IACFF,EAAAA,kBACAuE,EAAAA,cAAAA,GAAAA,EAAAA,EAAAA,EAAAA,aAAAA,IAOFvE,EAAAA,kBACAuE,EAAAA,cAAAA,GAAAA,EAAAA,EAAAA,EAAAA,WAAAA,IACFvE,EAAAA,wBA7CgByE,EAAAA,yBAAAA,aAAAA,EAAAA,YAGZlE,EAAAA,aAAAA,GAAAN,EAAAA,cAAAA,cAAAA,EAAAA,YAAAA,CAA2B,cAAAqE,EAAAvD,YAA3Bd,CAA2B,WAAAqE,EAAAnD,SAA3BlB,CAA2B,UAAAqE,EAAA7C,eAQvBlB,EAAAA,aAAAA,GAAAN,EAAAA,cAAAA,OAAAA,EAAAA,UASAM,EAAAA,aAAAA,GAAAN,EAAAA,cAAAA,UAAAA,EAAAA,mBAAAA,GAAAA,GAAAA,EAAAA,UAAAA,CAAiC,cAAAqE,EAAA1D,mBAcnCL,EAAAA,aAAAA,GAAAC,EAAAA,sBAAAA,IAAAA,EAAAA,kBAAAA,KAGAD,EAAAA,aAAAA,GAAAN,EAAAA,cAAAA,UAAAA,EAAAA,QAAAA,CAAkD,eAAAqE,EAAAL,WAO1B1D,EAAAA,aAAAA,GAAAN,EAAAA,cAAAA,OAAAA,EAAAA,mhCChDlC,SAAAyE,+CAcaA,oEAAAA,IAAwBC,QAAA,CAb1B,CACPC,EAAAA,YACAC,EAAAA,aACAC,EAAAA,cACAC,EAAAA,gBACAC,EAAAA,gBACAC,EAAAA,kBACAC,EAAAA,mBACAC,EAAAA,iGAKST,EAAwB,CAAAU,aAAA,CAHpB1E,GAA2BiE,QAAA,CATxCC,EAAAA,YACAC,EAAAA,aACAC,EAAAA,cACAC,EAAAA,gBACAC,EAAAA,gBACAC,EAAAA,kBACAC,EAAAA,mBACAC,EAAAA,qBAAmBE,QAAA,CAGX3E","sourcesContent":["import { Injectable } from '@angular/core';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class SelectAutocompleteService {\r\n\r\n  constructor() { }\r\n}\r\n","import {\r\n  Component,\r\n  EventEmitter,\r\n  Input,\r\n  OnChanges,\r\n  Output,\r\n  ViewChild,\r\n  DoCheck\r\n} from '@angular/core';\r\nimport { FormControl } from '@angular/forms';\r\n\r\n@Component({\r\n  selector: 'mat-select-autocomplete',\r\n  template: `\r\n    <mat-form-field appearance=\"{{ appearance }}\">\r\n      <mat-select\r\n        #selectElem\r\n        [placeholder]=\"placeholder\"\r\n        [formControl]=\"formControl\"\r\n        [multiple]=\"multiple\"\r\n        [(ngModel)]=\"selectedValue\"\r\n        (selectionChange)=\"onSelectionChange($event)\"\r\n      >\r\n        <div class=\"box-search\">\r\n          <mat-checkbox\r\n            *ngIf=\"multiple\"\r\n            color=\"primary\"\r\n            class=\"box-select-all\"\r\n            [(ngModel)]=\"selectAllChecked\"\r\n            (change)=\"toggleSelectAll($event)\"\r\n          ></mat-checkbox>\r\n          <input\r\n            #searchInput\r\n            type=\"text\"\r\n            [ngClass]=\"{ 'pl-1': !multiple }\"\r\n            (input)=\"filterItem(searchInput.value)\"\r\n            [placeholder]=\"selectPlaceholder\"\r\n          />\r\n          <div\r\n            class=\"box-search-icon\"\r\n            (click)=\"filterItem(''); searchInput.value = ''\"\r\n          >\r\n            <button mat-icon-button class=\"search-button\">\r\n              <mat-icon class=\"mat-24\" aria-label=\"Search icon\">clear</mat-icon>\r\n            </button>\r\n          </div>\r\n        </div>\r\n        <mat-select-trigger>\r\n          {{ onDisplayString() }}\r\n        </mat-select-trigger>\r\n        <mat-option\r\n          *ngFor=\"let option of options; trackBy: trackByFn\"\r\n          [disabled]=\"option.disabled\"\r\n          [value]=\"option[value]\"\r\n          [style.display]=\"hideOption(option) ? 'none' : 'flex'\"\r\n          >{{ option[display] }}\r\n        </mat-option>\r\n      </mat-select>\r\n      <mat-hint style=\"color:red\" *ngIf=\"showErrorMsg\">{{ errorMsg }}</mat-hint>\r\n    </mat-form-field>\r\n  `,\r\n  styles: [\r\n    `\r\n      .box-search {\r\n        margin: 8px;\r\n        border-radius: 2px;\r\n        box-shadow: 0 2px 2px 0 rgba(0, 0, 0, 0.16),\r\n          0 0 0 1px rgba(0, 0, 0, 0.08);\r\n        transition: box-shadow 200ms cubic-bezier(0.4, 0, 0.2, 1);\r\n        display: flex;\r\n      }\r\n      .box-search input {\r\n        flex: 1;\r\n        border: none;\r\n        outline: none;\r\n      }\r\n      .box-select-all {\r\n        width: 36px;\r\n        line-height: 33px;\r\n        color: #808080;\r\n        text-align: center;\r\n      }\r\n      .search-button {\r\n        width: 36px;\r\n        height: 36px;\r\n        line-height: 33px;\r\n        color: #808080;\r\n      }\r\n      .pl-1 {\r\n        padding-left: 1rem;\r\n      }\r\n    `\r\n  ]\r\n})\r\nexport class SelectAutocompleteComponent implements OnChanges, DoCheck {\r\n  @Input() selectPlaceholder = 'search...';\r\n  @Input() placeholder: string;\r\n  @Input() options;\r\n  @Input() disabled = false;\r\n  @Input() display = 'display';\r\n  @Input() value = 'value';\r\n  @Input() formControl: FormControl = new FormControl();\r\n  @Input() errorMsg = 'Field is required';\r\n  @Input() showErrorMsg = false;\r\n  @Input() selectedOptions;\r\n  @Input() multiple = true;\r\n\r\n  // New Options\r\n  @Input() labelCount = 1;\r\n  @Input() appearance: 'standard' | 'fill' | 'outline' = 'standard';\r\n\r\n  @Output()\r\n  selectionChange: EventEmitter<any> = new EventEmitter();\r\n\r\n  @ViewChild('selectElem', { static: true }) selectElem;\r\n\r\n  filteredOptions: Array<any> = [];\r\n  selectedValue: Array<any> = [];\r\n  selectAllChecked = false;\r\n  displayString = '';\r\n  constructor() {}\r\n\r\n  ngOnChanges() {\r\n    if (this.disabled) {\r\n      this.formControl.disable();\r\n    } else {\r\n      this.formControl.enable();\r\n    }\r\n    this.filteredOptions = this.options;\r\n    if (this.selectedOptions) {\r\n      this.selectedValue = this.selectedOptions;\r\n    } else if (this.formControl.value) {\r\n      this.selectedValue = this.formControl.value;\r\n    }\r\n  }\r\n\r\n  ngDoCheck() {\r\n    if (!this.selectedValue.length) {\r\n      this.selectionChange.emit(this.selectedValue);\r\n    }\r\n  }\r\n\r\n  toggleDropdown() {\r\n    this.selectElem.toggle();\r\n  }\r\n\r\n  toggleSelectAll(val) {\r\n    if (val.checked) {\r\n      this.filteredOptions.forEach(option => {\r\n        if (!this.selectedValue.includes(option[this.value])) {\r\n          this.selectedValue = this.selectedValue.concat([option[this.value]]);\r\n        }\r\n      });\r\n    } else {\r\n      const filteredValues = this.getFilteredOptionsValues();\r\n      this.selectedValue = this.selectedValue.filter(\r\n        item => !filteredValues.includes(item)\r\n      );\r\n    }\r\n    this.selectionChange.emit(this.selectedValue);\r\n  }\r\n\r\n  filterItem(value) {\r\n    this.filteredOptions = this.options.filter(\r\n      item => item[this.display].toLowerCase().indexOf(value.toLowerCase()) > -1\r\n    );\r\n    this.selectAllChecked = true;\r\n    this.filteredOptions.forEach(item => {\r\n      if (!this.selectedValue.includes(item[this.value])) {\r\n        this.selectAllChecked = false;\r\n      }\r\n    });\r\n    if (!this.filteredOptions.length) {\r\n      this.selectAllChecked = false;\r\n    }\r\n  }\r\n\r\n  hideOption(option) {\r\n    return !(this.filteredOptions.indexOf(option) > -1);\r\n  }\r\n\r\n  // Returns plain strings array of filtered values\r\n  getFilteredOptionsValues() {\r\n    const filteredValues = [];\r\n    this.filteredOptions.forEach(option => {\r\n      filteredValues.push(option.value);\r\n    });\r\n    return filteredValues;\r\n  }\r\n\r\n  onDisplayString() {\r\n    this.displayString = '';\r\n    // console.log('Valor seleccionado: ' + this.selectedValue);\r\n    if (this.selectedValue) {\r\n      // console.log('Entra aquí.');\r\n      let displayOption = [];\r\n      if (this.multiple) {\r\n        // console.log('Multiple');\r\n        // Multi select display\r\n        for (let i = 0; i < this.labelCount; i++) {\r\n          displayOption[i] = this.options.filter(\r\n            option => option[this.value] === this.selectedValue[i]\r\n          )[0];\r\n        }\r\n        if (displayOption.length) {\r\n          for (let i = 0; i < displayOption.length; i++) {\r\n            if (displayOption[i] && displayOption[i][this.display]) {\r\n              this.displayString += displayOption[i][this.display] + ',';\r\n            }\r\n          }\r\n          this.displayString = this.displayString.slice(0, -1);\r\n          if (\r\n            this.selectedValue.length > 1 &&\r\n            this.selectedValue.length > this.labelCount\r\n          ) {\r\n            // Se muestran unos pocos elementos de los seleccionados y se mencionan\r\n            // que existen n más.\r\n            this.displayString =\r\n              (\r\n                (this.displayString.length > 45) ?\r\n                  this.displayString.substr(0, 45 - 1) + '...' :\r\n                  this.displayString\r\n              ) + ` (y ${this.selectedValue.length - this.labelCount} más)`;\r\n          }\r\n        }\r\n      } else {\r\n        // console.log('Single');\r\n        // Single select display\r\n        displayOption = this.options.filter(\r\n          option => option[this.value] === this.selectedValue\r\n        );\r\n        if (displayOption.length) {\r\n          this.displayString = displayOption[0][this.display];\r\n        }\r\n        // console.log(this.selectedValue);\r\n      }\r\n    }\r\n    return this.displayString;\r\n  }\r\n\r\n  onSelectionChange(val) {\r\n    const filteredValues = this.getFilteredOptionsValues();\r\n    let count = 0;\r\n    if (this.multiple) {\r\n      this.selectedValue.filter(item => {\r\n        if (filteredValues.includes(item)) {\r\n          count++;\r\n        }\r\n      });\r\n      this.selectAllChecked = count === this.filteredOptions.length;\r\n    }\r\n    this.selectedValue = val.value;\r\n    this.selectionChange.emit(this.selectedValue);\r\n  }\r\n\r\n  public trackByFn(index, item) {\r\n    return item.value;\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatSelectModule } from '@angular/material/select';\r\nimport { MatFormFieldModule } from '@angular/material/form-field';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\r\nimport { SelectAutocompleteComponent } from './select-autocomplete.component';\r\n\r\n@NgModule({\r\n  imports: [\r\n    FormsModule,\r\n    CommonModule,\r\n    MatIconModule,\r\n    MatButtonModule,\r\n    MatSelectModule,\r\n    MatCheckboxModule,\r\n    MatFormFieldModule,\r\n    ReactiveFormsModule,\r\n  ],\r\n  declarations: [SelectAutocompleteComponent],\r\n  exports: [SelectAutocompleteComponent]\r\n})\r\nexport class SelectAutocompleteModule { }\r\n"]}